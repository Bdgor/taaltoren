const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
app.use(cors());
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

let towers = {};   // –≤–µ–∂—ñ –ø–æ –≥—Ä–∞–≤—Ü—é
let scores = {};   // —Ä–∞—Ö—É–Ω–æ–∫ –ø–æ –≥—Ä–∞–≤—Ü—é
let timer = 900;   // 15 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –±—É—Ä—ñ

// üïì –û—á–∏—â–µ–Ω–Ω—è —â–æ–¥–æ–±–∏ (24 –≥–æ–¥–∏–Ω = 86400000 –º—Å)
setInterval(() => {
  towers = {};
  scores = {};
  io.emit("clear");
  console.log("–†–µ–π—Ç–∏–Ω–≥ —Ç–∞ –≤–µ–∂—ñ –æ—á–∏—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.");
}, 86400000);

// ‚è±Ô∏è –¢–∞–π–º–µ—Ä –¥–ª—è –±—É—Ä—ñ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
setInterval(() => {
  timer--;
  if (timer <= 0) {
    towers = {};
    scores = {};
    io.emit("clear");
    timer = 900; // —Å–∫–∏–Ω—É—Ç–∏ —Ç–∞–π–º–µ—Ä
    console.log("–í–µ–∂—É –∑–Ω–∏—â–µ–Ω–æ –±—É—Ä–µ—é.");
  } else {
    io.emit("tick", { timer });
  }
}, 1000);

io.on("connection", socket => {
  console.log("–ì—Ä–∞–≤–µ—Ü—å –ø—ñ–¥'—î–¥–Ω–∞–≤—Å—è:", socket.id);

  socket.emit("sync", { towers, scores, timer });

  socket.on("add-block", ({ word, user }) => {
    if (!towers[user]) towers[user] = [];
    towers[user].push({ word });
    scores[user] = (scores[user] || 0) + 1;
    io.emit("sync", { towers, scores });
  });

  socket.on("sync", ({ towers: newTowers, scores: newScores }) => {
    towers = newTowers;
    scores = newScores;
    io.emit("sync", { towers, scores });
  });

  socket.on("disconnect", () => {
    console.log("–ì—Ä–∞–≤–µ—Ü—å –≤–∏–π—à–æ–≤:", socket.id);
  });
});

server.listen(3000, () => {
  console.log("–ú—É–ª—å—Ç–ø–ª–µ—î—Ä-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ 3000");
});


// ‚úÖ –õ–∏—à–µ –æ–¥–∏–Ω –≤–∏–∫–ª–∏–∫!
server.listen(3000, () => {
  console.log("–ú—É–ª—å—Ç–ø–ª–µ—î—Ä-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ 3000");
});
